[user]
    name = AUTHORNAME
    email = AUTHOREMAIL
[core]
    editor = emacs -nw
    autocrlf = false
    eol = lf
[credential]
    helper = cache
[difftool "kdiff3"]
    path = /usr/local/bin/kdiff3
    trustExitCode = false
[difftool]
    prompt = false
[diff]
    tool = kdiff3
[mergetool "kdiff3"]
    path = /usr/local/bin/kdiff3
    trustExitCode = false
[mergetool]
    keepBackup = false
[merge]
    tool = kdiff3
[push]
    default = simple
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = yellow bold
[alias]
    a = add --all
    ai = add -i
    #----------------------------------------------#
    ap = apply
    as = apply --stat
    ac = apply --check
    #----------------------------------------------#
    ama = am --abort
    amr = am --resolved
    ams = am --skip
    #----------------------------------------------#
    b = branch
    ba = branch -a
    bd = branch -d
    br = branch -r
    bv = branch -avv
    #----------------------------------------------#
    c = commit
    ca = commit -a
    cm = commit -m
    cem = commit --allow-empty -m
    cam = commit -am
    cd = commit --amend
    cad = commit -a --amend
    ced = commit --allow-empty --amend
    #----------------------------------------------#
    d = diff
    dc = diff --cached
    dl = difftool
    dlc = difftool --cached
    dk = diff --check
    dp = diff --patience
    dck = diff --cached --check
    dnnr = diff-tree --no-commit-id --name-only -r
    dno = diff --name-only
    #----------------------------------------------#
    f = fetch
    fo = fetch origin
    fu = fetch upstream
    fap = fetch --all --prune
    #----------------------------------------------#
    fp = format-patch
    #----------------------------------------------#
    fk = fsck
    #----------------------------------------------#
    g = grep -p
    #----------------------------------------------#
    lwc = log --raw --no-merges
    l = log --oneline
    lg = log --oneline --graph --decorate
    ls = ls-files
    lsf = "!git ls-files | grep -i"
    #----------------------------------------------#
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip
    #----------------------------------------------#
    o = checkout
    ob = checkout -b
    obr = "!f() { git checkout -b $1; git push --set-upstream origin $1; }; f"
    obf = "!f() { git checkout -b feature/$1; }; f"
    obb = "!f() { git checkout -b bugfix/$1; }; f"
    obh = "!f() { git checkout -b hotfix/$1; }; f"
    obt = "!f() { git checkout -b test/$1; }; f"
    #----------------------------------------------#
    pr = prune -v
    #----------------------------------------------#
    ps = push
    psf = push -f
    psu = push -u
    pso = push origin
    psao = push --all origin
    psfo = push -f origin
    psuo = push -u origin
    psom = push origin master
    psfom = push -f origin master
    psuom = push -u origin master
    #----------------------------------------------#
    pl = pull
    plu = pull -u
    plo = pull origin
    plp = pull upstream
    plom = pull origin master
    plpm = pull upstream master
    plr = pull --rebase
    plro = pull --rebase origin
    plrp = pull --rebase upstream
    plrom = pull --rebase origin master
    plrpm = pull --rebase upstream master
    #----------------------------------------------#
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip
    #----------------------------------------------#
    re = reset
    rh = reset HEAD
    reh = reset --hard
    rem = reset --mixed
    res = reset --soft
    rehh = reset --hard HEAD
    remh = reset --mixed HEAD
    resh = reset --soft HEAD
    #----------------------------------------------#
    r = remote
    ra = remote add
    rr = remote rm
    ru = remote update
    rv = remote -v
    rm = remote rename
    rp = remote prune
    rs = remote show
    rao = remote add origin
    rau = remote add upstream
    rso = remote show origin
    rsu = remote show upstream
    rpo = remote prune origin
    rpu = remote prune upstream
    #----------------------------------------------#
    s = status
    sb = status -s -b
    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    sp = stash pop
    ss = stash save
    sw = stash show
    #----------------------------------------------#
    subsyn = submodule sync --recursive
    subupd = submodule update --init --recursive
    #----------------------------------------------#
    w = show
    wp = show -p
    wr = show -p --no-color
    #----------------------------------------------#
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
    flat = clone --depth 1
    subpull = !git submodule foreach git pull --tags origin master
    subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
    human = name-rev --name-only --refs=refs/heads/*
    serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    cleanup = "!git branch --merged | grep  -v '\\*\\|main\\|release' | xargs -n 1 -r git branch -d"
    subsu = "!git subsyn && git subupd"
    uberpull = "!git pull --rebase && git fetch --all --prune && git subsyn && git subupd && git gc && git prune"
    mvbranch = "!moveit() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; moveit"
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
